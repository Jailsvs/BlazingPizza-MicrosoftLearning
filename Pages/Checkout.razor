@page "/checkout"
@layout MainLayout
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm Model=Order.DeliveryAddress OnValidSubmit=PlaceOrder OnInvalidSubmit=ShowError>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Revisar pedido</h4>
                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Entregar para...</h4>
                @if (isError) 
                {
                    <div class="alert alert-danger">Por favor, insira seu nome e endereço.</div>
                }
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" disabled=@isSubmitting>
            Concluir encomenda
        </button>
        <!--<ValidationSummary />-->
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool isSubmitting;
    bool isError = false;

    async Task PlaceOrder()
    {
        isError = false;
        isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    protected void ShowError()
    {
        isError = true;
    }

}